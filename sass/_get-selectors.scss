@use 'sass:list';
@use 'util' as *;

@function selectors-helper($prefix, $tokens) {
  @if length($tokens) == 0 {
    @return '#{$prefix},';
  }

  @if length($tokens) == 1 {
    @return "#{$prefix} [data-route~='~/#{nth($tokens, 1)}'],";
  }

  $selectors: '';
  $partials: partials($tokens);

  // Recursively call child-selectors-helper with rest of tokens
  $firstPartial: nth($partials, 1);
  $newPrefix: "#{$prefix} [data-route~='~#{$firstPartial}']";
  $selectors: $selectors + selectors-helper($newPrefix, list-slice($tokens, 2));

  @for $i from 2 through length($tokens) {
    $selectors: $selectors +
      "#{$prefix} [data-route~='~#{nth($partials, $i)}'],";
  }

  @return $selectors;
}

@function get-child-selectors($route) {
  $tokens: str-split($route, '/');

  @if length($tokens) > 2 {
    $tokens: list-slice($tokens, 2);
    $partials: partials($tokens);

    $selectors: '';

    @for $i from 1 to length($tokens) {
      $prefix: "[data-route~='^#{nth($partials, $i)}']";
      $tailTokens: list-slice($tokens, $i + 1);
      $selectors: $selectors + selectors-helper($prefix, $tailTokens);
    }

    @return $selectors;
  }

  @return '';
}

@function get-parent-selectors($route) {
  $tokens: str-split($route, '/');

  @if length($tokens) > 2 {
    $tokens: list-slice($tokens, 2);
    $partials: partials($tokens);

    $selectors: '';

    @for $i from 1 to length($tokens) {
      $prefix: "&:not([data-route-state^='#{$route}']) [data-route~='^#{nth($partials, $i)}']";
      $tailTokens: list-slice($tokens, $i + 1);
      $selectors: $selectors + selectors-helper($prefix, $tailTokens);
    }

    @return $selectors;
  }

  @return '';
}
