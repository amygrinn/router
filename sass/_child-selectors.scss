@use 'sass:list';
@use 'util' as *;

@function partials($tokens) {
  $partials: [];
  $accumulator: '';

  @if length($tokens) == 0 {
    @return [];
  }

  @if nth($tokens, 1) == '' {
    $tokens: list-slice($tokens, 2);
  }

  @each $token in $tokens {
    $accumulator: $accumulator + '/' + $token;
    $partials: append($partials, $accumulator);
  }

  @return $partials;
}

@function exclude($tokens, $not: false) {
  @if length($tokens) == 0 {
    @return '';
  }

  @if length($tokens) == 1 {
    @if $not {
      @return "[data-route~='~/#{nth($tokens, 1)}']";
    }
    @return "[data-route]:not([data-route~='~/#{nth($tokens, 1)}'])";
  }

  $partials: partials($tokens);

  $exclude: '';
  @for $i from 1 through length($partials) {
    $partial: nth($partials, $i);
    $tailTokens: [];
    @if $i < length($tokens) {
      $tailTokens: list-slice($tokens, $i + 1);
    }

    @if $not {
      $exclude: "#{$exclude} [data-route~='~/#{$partial}'] #{exclude($tailTokens, $not)}";
    } @else {
      $exclude: "#{$exclude} [data-route]:not([data-route~='~/#{$partial}']) #{exclude($tailTokens, $not)}";
    }
  }

  @return $exclude;
}

@function concat($tokens, $not: false) {
  @if length($tokens) == 0 {
    @return '';
  }

  @if length($tokens) == 1 {
    @if $not {
      @return "[data-route~='~/#{nth($tokens, 1)}']";
    }
    @return ":not([data-route~='~/#{nth($tokens, 1)}'])";
  }

  $partials: partials($tokens);

  $concat: '';
  @for $i from 1 through length($partials) {
    $partial: nth($partials, $i);
    $tailTokens: [];
    @if $i < length($tokens) {
      $tailTokens: list-slice($tokens, $i + 1);
    }

    @if $not {
      $concat: "#{$concat}[data-route~='~#{$partial}']#{concat($tailTokens)}";
    } @else {
      $concat: "#{$concat}:not([data-route~='~#{$partial}'])#{concat($tailTokens)}";
    }
  }

  @return $concat;
}

@function child-selectors-helper($prefix, $tokens, $not: false) {
  @if length($tokens) == 0 {
    @return '#{$prefix},';
  }

  @if length($tokens) == 1 {
    @if $not {
      @return "#{$prefix} [data-route~='~/#{nth($tokens, 1)}'],";
    }
    @return "#{$prefix} [data-route]:not([data-route~='~/#{nth($tokens, 1)}']),";
  }

  $selectors: '';
  $partials: partials($tokens);
  $selectors: $selectors +
    child-selectors-helper(
      "#{$prefix} [data-route~='~#{nth($partials, 1)}']",
      list-slice($tokens, 2),
      $not
    );

  @if length($tokens) > 1 {
    $headTokens: list-slice($tokens, 1, length($tokens) - 1);
    $concatPartial: nth($partials, length($partials));

    @if $not {
      $selectors: $selectors +
        "#{$prefix} > #{concat($headTokens, $not)}[data-route~='~#{$concatPartial}'],";
    } @else {
      $selectors: $selectors +
        "#{$prefix} > [data-route]#{concat($headTokens, $not)}:not([data-route~='~#{$concatPartial}']),";
    }

    @for $i from 2 through length($tokens) {
      $partial: nth($partials, $i);
      $headTokens: list-slice($tokens, 2, $i - 1);

      @if $not {
        $selectors: $selectors +
          "#{$prefix} #{exclude($headTokens, $not)} [data-route~='~#{$partial}'],";
      } @else {
        $selectors: $selectors +
          "#{$prefix} #{exclude($headTokens, $not)} [data-route~='~#{$partial}'],";
      }
    }
  }

  @return $selectors;
}

@function get-child-selectors($route, $not: false) {
  $tokens: str-split($route, '/');

  @if length($tokens) > 2 {
    $tokens: list-slice($tokens, 2);
    $partials: partials($tokens);

    $selectors: '';

    @for $i from 1 to length($tokens) {
      $selectors: $selectors +
        child-selectors-helper(
          "[data-route~='^#{nth($partials, $i)}']",
          list-slice($tokens, $i + 1),
          $not
        );
    }

    @return $selectors;
  }

  @return '';
}
